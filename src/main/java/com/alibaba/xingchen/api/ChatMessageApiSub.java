/*
 * XingChen 开放接口定义
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alibaba.xingchen.api;

import com.alibaba.xingchen.ApiCallback;
import com.alibaba.xingchen.ApiClient;
import com.alibaba.xingchen.ApiException;
import com.alibaba.xingchen.ApiResponse;
import com.alibaba.xingchen.Configuration;
import com.alibaba.xingchen.Pair;
import com.alibaba.xingchen.ProgressRequestBody;
import com.alibaba.xingchen.ProgressResponseBody;

import com.alibaba.xingchen.constant.AcaConstants;
import com.alibaba.xingchen.enums.AcaOpenApiEnum;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alibaba.xingchen.model.ChatHistoryQueryDTO;
import com.alibaba.xingchen.model.MessageRatingRequest;
import com.alibaba.xingchen.model.ResultDTOBoolean;
import com.alibaba.xingchen.model.ResultDTOPageResultChatMessageDTO;
import com.alibaba.xingchen.model.SysReminderRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChatMessageApiSub extends BaseApiSub {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChatMessageApiSub() {
        this(Configuration.getDefaultApiClient());
    }

    public ChatMessageApiSub(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for chatHistories
     * @param chatHistoryQueryDTO 对话请求 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chatHistoriesCall(ChatHistoryQueryDTO chatHistoryQueryDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatHistoryQueryDTO;

        // create path and map variables
        String localVarPath = String.format("/%s/api/chat/message/histories", getApiVersion());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatHistoriesValidateBeforeCall(ChatHistoryQueryDTO chatHistoryQueryDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatHistoryQueryDTO' is set
        if (chatHistoryQueryDTO == null) {
            throw new ApiException("Missing the required parameter 'chatHistoryQueryDTO' when calling chatHistories(Async)");
        }

        return chatHistoriesCall(chatHistoryQueryDTO, _callback);

    }

    /**
     * 对话历史
     *  当前用户与角色的对话历史查询： - where: 查询条件：必传  - characterId: 必传  - startTime：开始时间戳，选传  - endTime: 结束时间戳，选传  - sessionId: 会话ID，宣传 - 排序：必传，默认根据创建时间倒排 - pageSize: 分页大小，选传，默认10 - pageNumber: 分页页码，宣传，默认1 
     * @param chatHistoryQueryDTO 对话请求 (required)
     * @return ResultDTOPageResultChatMessageDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOPageResultChatMessageDTO chatHistories(ChatHistoryQueryDTO chatHistoryQueryDTO) throws ApiException {
        ApiResponse<ResultDTOPageResultChatMessageDTO> localVarResp = chatHistoriesWithHttpInfo(chatHistoryQueryDTO);
        return localVarResp.getData();
    }

    /**
     * 对话历史
     *  当前用户与角色的对话历史查询： - where: 查询条件：必传  - characterId: 必传  - startTime：开始时间戳，选传  - endTime: 结束时间戳，选传  - sessionId: 会话ID，宣传 - 排序：必传，默认根据创建时间倒排 - pageSize: 分页大小，选传，默认10 - pageNumber: 分页页码，宣传，默认1 
     * @param chatHistoryQueryDTO 对话请求 (required)
     * @return ApiResponse&lt;ResultDTOPageResultChatMessageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOPageResultChatMessageDTO> chatHistoriesWithHttpInfo(ChatHistoryQueryDTO chatHistoryQueryDTO) throws ApiException {
        okhttp3.Call localVarCall = chatHistoriesValidateBeforeCall(chatHistoryQueryDTO, null);
        Type localVarReturnType = new TypeToken<ResultDTOPageResultChatMessageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 对话历史 (asynchronously)
     *  当前用户与角色的对话历史查询： - where: 查询条件：必传  - characterId: 必传  - startTime：开始时间戳，选传  - endTime: 结束时间戳，选传  - sessionId: 会话ID，宣传 - 排序：必传，默认根据创建时间倒排 - pageSize: 分页大小，选传，默认10 - pageNumber: 分页页码，宣传，默认1 
     * @param chatHistoryQueryDTO 对话请求 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chatHistoriesAsync(ChatHistoryQueryDTO chatHistoryQueryDTO, final ApiCallback<ResultDTOPageResultChatMessageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatHistoriesValidateBeforeCall(chatHistoryQueryDTO, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOPageResultChatMessageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatHistories1
     * @param characterId 角色ID (required)
     * @param pageNum 页码 (optional)
     * @param pageSize 分页大小 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chatHistories1Call(String characterId, Integer pageNum, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = String.format("/%s/api/chat/history/{characterId}", getApiVersion())
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNum", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        localVarHeaderParams.put(AcaConstants.GATEWAY_HEADER_SERVICE_ROUTER, AcaOpenApiEnum.CHAT_MESSAGE_HISTORIES.getGatewayRoute());

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatHistories1ValidateBeforeCall(String characterId, Integer pageNum, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling chatHistories1(Async)");
        }

        return chatHistories1Call(characterId, pageNum, pageSize, _callback);

    }

    /**
     * 对话历史
     * 当前用户与角色的对话历史
     * @param characterId 角色ID (required)
     * @param pageNum 页码 (optional)
     * @param pageSize 分页大小 (optional)
     * @return ResultDTOPageResultChatMessageDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
        请使用接口 com.alibaba.xingchen.api.ChatMessageApiSub#chatHistories
     */
    @Deprecated
    public ResultDTOPageResultChatMessageDTO chatHistories1(String characterId, Integer pageNum, Integer pageSize) throws ApiException {
        ApiResponse<ResultDTOPageResultChatMessageDTO> localVarResp = chatHistories1WithHttpInfo(characterId, pageNum, pageSize);
        return localVarResp.getData();
    }

    /**
     * 对话历史
     * 当前用户与角色的对话历史
     * @param characterId 角色ID (required)
     * @param pageNum 页码 (optional)
     * @param pageSize 分页大小 (optional)
     * @return ApiResponse&lt;ResultDTOPageResultChatMessageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOPageResultChatMessageDTO> chatHistories1WithHttpInfo(String characterId, Integer pageNum, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = chatHistories1ValidateBeforeCall(characterId, pageNum, pageSize, null);
        Type localVarReturnType = new TypeToken<ResultDTOPageResultChatMessageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 对话历史 (asynchronously)
     * 当前用户与角色的对话历史
     * @param characterId 角色ID (required)
     * @param pageNum 页码 (optional)
     * @param pageSize 分页大小 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chatHistories1Async(String characterId, Integer pageNum, Integer pageSize, final ApiCallback<ResultDTOPageResultChatMessageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatHistories1ValidateBeforeCall(characterId, pageNum, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOPageResultChatMessageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rateMessage
     * @param messageRatingRequest 对话请求 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rateMessageCall(MessageRatingRequest messageRatingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = messageRatingRequest;

        // create path and map variables
        String localVarPath = String.format("/%s/api/chat/rating", getApiVersion());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rateMessageValidateBeforeCall(MessageRatingRequest messageRatingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageRatingRequest' is set
        if (messageRatingRequest == null) {
            throw new ApiException("Missing the required parameter 'messageRatingRequest' when calling rateMessage(Async)");
        }

        return rateMessageCall(messageRatingRequest, _callback);

    }

    /**
     * 消息评分
     *  评分请求参数： - 消息ID：必传 - 评分：必传，整型，[0-5] 
     * @param messageRatingRequest 对话请求 (required)
     * @return ResultDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOBoolean rateMessage(MessageRatingRequest messageRatingRequest) throws ApiException {
        ApiResponse<ResultDTOBoolean> localVarResp = rateMessageWithHttpInfo(messageRatingRequest);
        return localVarResp.getData();
    }

    /**
     * 消息评分
     *  评分请求参数： - 消息ID：必传 - 评分：必传，整型，[0-5] 
     * @param messageRatingRequest 对话请求 (required)
     * @return ApiResponse&lt;ResultDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOBoolean> rateMessageWithHttpInfo(MessageRatingRequest messageRatingRequest) throws ApiException {
        okhttp3.Call localVarCall = rateMessageValidateBeforeCall(messageRatingRequest, null);
        Type localVarReturnType = new TypeToken<ResultDTOBoolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 消息评分 (asynchronously)
     *  评分请求参数： - 消息ID：必传 - 评分：必传，整型，[0-5] 
     * @param messageRatingRequest 对话请求 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rateMessageAsync(MessageRatingRequest messageRatingRequest, final ApiCallback<ResultDTOBoolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = rateMessageValidateBeforeCall(messageRatingRequest, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOBoolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sysReminder
     * @param sysReminderRequest 对话请求 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sysReminderCall(SysReminderRequest sysReminderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sysReminderRequest;

        // create path and map variables
        String localVarPath = String.format("/%s/api/chat/reminder", getApiVersion());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sysReminderValidateBeforeCall(SysReminderRequest sysReminderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sysReminderRequest' is set
        if (sysReminderRequest == null) {
            throw new ApiException("Missing the required parameter 'sysReminderRequest' when calling sysReminder(Async)");
        }

        return sysReminderCall(sysReminderRequest, _callback);

    }

    /**
     * 
     * 
     * @param sysReminderRequest 对话请求 (required)
     * @return ResultDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOBoolean sysReminder(SysReminderRequest sysReminderRequest) throws ApiException {
        ApiResponse<ResultDTOBoolean> localVarResp = sysReminderWithHttpInfo(sysReminderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sysReminderRequest 对话请求 (required)
     * @return ApiResponse&lt;ResultDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOBoolean> sysReminderWithHttpInfo(SysReminderRequest sysReminderRequest) throws ApiException {
        okhttp3.Call localVarCall = sysReminderValidateBeforeCall(sysReminderRequest, null);
        Type localVarReturnType = new TypeToken<ResultDTOBoolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sysReminderRequest 对话请求 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sysReminderAsync(SysReminderRequest sysReminderRequest, final ApiCallback<ResultDTOBoolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = sysReminderValidateBeforeCall(sysReminderRequest, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOBoolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
