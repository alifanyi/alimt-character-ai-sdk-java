/*
 * XingChen 开放接口定义
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alibaba.xingchen.api;


import com.alibaba.xingchen.*;
import com.alibaba.xingchen.enums.Version;
import com.alibaba.xingchen.model.ChatReqParams;
import com.alibaba.xingchen.model.ChatResult;
import com.alibaba.xingchen.model.ModelParameters;
import com.alibaba.xingchen.model.ResultDTOChatResult;
import com.alibaba.xingchen.model.ext.chat.*;
import com.google.gson.reflect.TypeToken;
import io.reactivex.BackpressureStrategy;
import io.reactivex.Flowable;
import io.reactivex.FlowableEmitter;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.sse.EventSource;
import okhttp3.sse.EventSourceListener;
import okhttp3.sse.EventSources;

import java.lang.reflect.Type;
import java.util.*;
import java.util.stream.Collectors;

public class ChatApiSub extends BaseApiSub {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChatApiSub() {
        this(Configuration.getDefaultApiClient());
    }

    public ChatApiSub(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ChatApiSub(ApiClient apiClient, Version apiVersion) {
        super(apiVersion);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for chat
     * @param chatReqParams 对话请求 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chatCall(Object chatReqParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatReqParams;



        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        String localVarPath = "/" + getApiVersion() + "/api/chat/send";

        //setServiceRouterHeader(localVarHeaderParams, localVarPath);

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatValidateBeforeCall(Object chatReqParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatReqParams' is set
        if (chatReqParams == null) {
            throw new ApiException("Missing the required parameter 'chatReqParams' when calling chat(Async)");
        }

        return chatCall(chatReqParams, _callback);

    }

    private Request buildRequest1(Object chatReqParams, String url) throws ApiException {
        // verify the required parameter 'chatReqParams' is set
        if (chatReqParams == null) {
            throw new ApiException("Missing the required parameter 'chatReqParams' when calling chat(Async)");
        }
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatReqParams;

        // create path and map variables
        String localVarPath = (url != null && !url.isEmpty()) ? url : "/"  + getApiVersion() + "/api/chat/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        //setServiceRouterHeader(localVarHeaderParams, localVarPath);

        final String[] localVarAccepts = {
                "application/json",
                "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json",
                "text/event-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildRequest(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, null);
    }

    private BaseChatRequest convertRequest(ChatReqParams chatReqParams) {
        ModelParameters modelParameters = chatReqParams.getModelParameters();
        List<com.alibaba.xingchen.model.ext.chat.Message> messages = chatReqParams.getMessages().stream().map(message -> com.alibaba.xingchen.model.ext.chat.Message.builder()
                .name(message.getName())
                .content(message.getContent())
                .role(message.getRole())
                .build()).collect(Collectors.toList());
        BaseChatRequest chatRequest = BaseChatRequest.builder()
                .model(modelParameters.getModelName())
                .streaming(chatReqParams.getStreaming())
                .parameters(
                        ModelParameter.builder()
                                .seed(modelParameters.getSeed())
                                .topP(modelParameters.getTopP())
                                .topK(modelParameters.getTopK())
                                .maxLength(modelParameters.getMaxLength())
                                .minLength(modelParameters.getMinLength())
                                .temperature(modelParameters.getTemperature())
                                .build()
                ).input(
                        BaseChatRequest.Input
                                .builder()
                                .prompt("<|system|>") // 自定义Prompt
                                .messages(messages)
                                .aca(AcaChatExtParam.builder()
                                        .botProfile(
                                                BotProfile.builder()
                                                        .characterId(chatReqParams.getBotProfile().getCharacterId())
                                                        .version(chatReqParams.getBotProfile().getVersion() != null ?
                                                                chatReqParams.getBotProfile().getVersion().shortValue() : null)
                                                        .name(chatReqParams.getBotProfile().getName())
                                                        .content(chatReqParams.getBotProfile().getContent())
                                                        .build()
                                        )
                                        .userProfile(
                                                com.alibaba.xingchen.model.ext.chat.UserProfile.builder()
                                                        .userId(chatReqParams.getUserProfile().getUserId())
                                                        .userName(chatReqParams.getUserProfile().getUserName())
                                                        .build()

                                        )
                                        .sampleMessages(chatReqParams.getSampleMessages())
                                        .scenario(
                                                Scenario.builder()
                                                        .description(Objects.nonNull(chatReqParams.getScenario()) ? chatReqParams.getScenario().getDescription() : null)
                                                        .build()
                                        )
                                        .build())
                                .build()
                ).build();
        return chatRequest;
    }

    /**
     * 用户对话
     *  发起角色对话： 
     * @param chatReqParams 对话请求 (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOChatResult chat(ChatReqParams chatReqParams) throws ApiException {
        if(Version.v2.name().equals(getApiVersion())) {
            return chat(convertRequest(chatReqParams));
        }
        ApiResponse<ResultDTOChatResult> localVarResp = chatWithHttpInfo(chatReqParams);
        return localVarResp.getData();
    }

    private ResultDTOChatResult chat(BaseChatRequest chatRequest) throws ApiException {
        ApiResponse<ResultDTOChatResult> localVarResp = chatWithHttpInfo(chatRequest);
        return localVarResp.getData();
    }

    /**
     * 用户对话
     *  发起角色对话： 
     * @param chatReqParams 对话请求 (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOChatResult> chatWithHttpInfo(Object chatReqParams) throws ApiException {
        okhttp3.Call localVarCall = chatValidateBeforeCall(chatReqParams, null);
        Type localVarReturnType = new TypeToken<ResultDTOChatResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 用户对话 (asynchronously)
     *  发起角色对话： 
     * @param chatReqParams 对话请求 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chatAsync(ChatReqParams chatReqParams, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatValidateBeforeCall(chatReqParams, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private Flowable<ChatResult> streamOut(BaseChatRequest chatRequest) throws ApiException {
        Request request = buildRequest1(chatRequest, "/" + getApiVersion() + "/api/chat/send");
        return sseInvoke(request);
    }

    public Flowable<ChatResult> streamOut(ChatReqParams chatReqParams) throws ApiException {
        if(Version.v2.name().equals(getApiVersion())) {
            return streamOut(convertRequest(chatReqParams));
        }
        Request request = buildRequest1(chatReqParams, "/" + getApiVersion() + "/api/chat/send");
        return sseInvoke(request);
    }

    private Flowable<ChatResult> sseInvoke(Request request) {
        Flowable<ChatResult> flowable = Flowable.<ChatResult>create(
                emitter -> {
                    EventSources.createFactory(localVarApiClient.getHttpClient()).newEventSource(
                            request, new EventSourceListener() {
                                @java.lang.Override
                                public void onEvent(
                                        EventSource eventSource,
                                        java.lang.String id,
                                        java.lang.String type,
                                        java.lang.String data) {
                                    handleSSEEvent(emitter, id, type, data);
                                }

                                @java.lang.Override
                                public void onOpen(EventSource eventSource, Response response) {
                                    super.onOpen(eventSource, response);
                                }

                                @java.lang.Override
                                public void onFailure(EventSource eventSource, java.lang.Throwable t, Response response) {
                                    super.onFailure(eventSource, t, response);
                                    emitter.onError(new ApiException(parseFailed(response)));
                                }

                                @java.lang.Override
                                public void onClosed(EventSource eventSource) {
                                    super.onClosed(eventSource);
                                    emitter.onComplete();
                                }
                            });
                },
                BackpressureStrategy.BUFFER);
        return flowable;
    }
    private ApiException parseFailed(Response response) {
        try {
            ChatResult result = this.getApiClient().deserialize(response, new TypeToken<ChatResult>(){}.getType());
            Integer code = Objects.nonNull(result) && Objects.nonNull(result.getErrorCode()) ? result.getErrorCode() : 500;
            String message = JSON.serialize(result);
            return new ApiException(code, message);
        } catch (Exception e) {
            return new ApiException(e);
        }
    }

    private void handleSSEEvent(
            FlowableEmitter<ChatResult> emitter, String id, String type, String data) {
//        log.debug(String.format("Event: id %s, type: %s, data: %s", id, type, data));
        if ("error".equals(type)) {
            emitter.onError(new ApiException(data));
        } else if ("success".equals(type) || "stop".equals(type) || "length".equals(type)) {
            emitter.onNext(JSON.deserialize(data,  new TypeToken<ChatResult>(){}.getType()));
        } else if (type == null) {
            emitter.onNext(JSON.deserialize(data,  new TypeToken<ChatResult>(){}.getType()));
        }
    }
}