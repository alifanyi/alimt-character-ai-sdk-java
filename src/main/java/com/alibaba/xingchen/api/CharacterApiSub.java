/*
 * XingChen 开放接口定义
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alibaba.xingchen.api;

import com.alibaba.xingchen.*;
import com.alibaba.xingchen.constant.AcaConstants;
import com.alibaba.xingchen.enums.AcaOpenApiEnum;
import com.alibaba.xingchen.model.*;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CharacterApiSub extends BaseApiSub{
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CharacterApiSub() {
        this(Configuration.getDefaultApiClient());
    }

    public CharacterApiSub(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for characterDetails
     * @param characterId 角色ID (required)
     * @param version 角色版本 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call characterDetailsCall(String characterId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = String.format("/%s/api/character/details", getApiVersion());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (characterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("characterId", characterId));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call characterDetailsValidateBeforeCall(String characterId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling characterDetails(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling characterDetails(Async)");
        }

        return characterDetailsCall(characterId, version, _callback);

    }

    /**
     * 角色详情
     * 获取角色详细信息
     * @param characterId 角色ID (required)
     * @param version 角色版本 (required)
     * @return ResultDTOCharacterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOCharacterDTO characterDetails(String characterId, Integer version) throws ApiException {
        ApiResponse<ResultDTOCharacterDTO> localVarResp = characterDetailsWithHttpInfo(characterId, version);
        return localVarResp.getData();
    }

    /**
     * 角色详情
     * 获取角色详细信息
     * @param characterId 角色ID (required)
     * @param version 角色版本 (required)
     * @return ApiResponse&lt;ResultDTOCharacterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOCharacterDTO> characterDetailsWithHttpInfo(String characterId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = characterDetailsValidateBeforeCall(characterId, version, null);
        Type localVarReturnType = new TypeToken<ResultDTOCharacterDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 角色详情 (asynchronously)
     * 获取角色详细信息
     * @param characterId 角色ID (required)
     * @param version 角色版本 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call characterDetailsAsync(String characterId, Integer version, final ApiCallback<ResultDTOCharacterDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = characterDetailsValidateBeforeCall(characterId, version, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOCharacterDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param characterCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(CharacterCreateDTO characterCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = characterCreateDTO;

        // create path and map variables
        String localVarPath = String.format("/%s/api/character/create", getApiVersion());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(CharacterCreateDTO characterCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterCreateDTO' is set
        if (characterCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'characterCreateDTO' when calling create(Async)");
        }

        return createCall(characterCreateDTO, _callback);

    }

    /**
     * 创建角色
     * 基于角色名称、人设和对话示例定义角色，并返回角色ID
     * @param characterCreateDTO  (required)
     * @return ResultDTOCharacterKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOCharacterKey create(CharacterCreateDTO characterCreateDTO) throws ApiException {
        ApiResponse<ResultDTOCharacterKey> localVarResp = createWithHttpInfo(characterCreateDTO);
        return localVarResp.getData();
    }

    /**
     * 创建角色
     * 基于角色名称、人设和对话示例定义角色，并返回角色ID
     * @param characterCreateDTO  (required)
     * @return ApiResponse&lt;ResultDTOCharacterKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOCharacterKey> createWithHttpInfo(CharacterCreateDTO characterCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(characterCreateDTO, null);
        Type localVarReturnType = new TypeToken<ResultDTOCharacterKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建角色 (asynchronously)
     * 基于角色名称、人设和对话示例定义角色，并返回角色ID
     * @param characterCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(CharacterCreateDTO characterCreateDTO, final ApiCallback<ResultDTOCharacterKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(characterCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOCharacterKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrUpdateVersion
     * @param characterVersionCreateOrUpdateDTO 待更新的角色信息 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdateVersionCall(CharacterVersionCreateOrUpdateDTO characterVersionCreateOrUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = characterVersionCreateOrUpdateDTO;

        // create path and map variables
        String localVarPath = String.format("/%s/api/character/createOrUpdateVersion", getApiVersion());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateVersionValidateBeforeCall(CharacterVersionCreateOrUpdateDTO characterVersionCreateOrUpdateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterVersionCreateOrUpdateDTO' is set
        if (characterVersionCreateOrUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'characterVersionCreateOrUpdateDTO' when calling createOrUpdateVersion(Async)");
        }

        return createOrUpdateVersionCall(characterVersionCreateOrUpdateDTO, _callback);

    }

    /**
     * 创建或更新角色版本
     * 必须字段：characterId 和 version。返回角色版本详情。
     * @param characterVersionCreateOrUpdateDTO 待更新的角色信息 (required)
     * @return ResultDTOCharacterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOCharacterDTO createOrUpdateVersion(CharacterVersionCreateOrUpdateDTO characterVersionCreateOrUpdateDTO) throws ApiException {
        ApiResponse<ResultDTOCharacterDTO> localVarResp = createOrUpdateVersionWithHttpInfo(characterVersionCreateOrUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * 创建或更新角色版本
     * 必须字段：characterId 和 version。返回角色版本详情。
     * @param characterVersionCreateOrUpdateDTO 待更新的角色信息 (required)
     * @return ApiResponse&lt;ResultDTOCharacterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOCharacterDTO> createOrUpdateVersionWithHttpInfo(CharacterVersionCreateOrUpdateDTO characterVersionCreateOrUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateVersionValidateBeforeCall(characterVersionCreateOrUpdateDTO, null);
        Type localVarReturnType = new TypeToken<ResultDTOCharacterDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建或更新角色版本 (asynchronously)
     * 必须字段：characterId 和 version。返回角色版本详情。
     * @param characterVersionCreateOrUpdateDTO 待更新的角色信息 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdateVersionAsync(CharacterVersionCreateOrUpdateDTO characterVersionCreateOrUpdateDTO, final ApiCallback<ResultDTOCharacterDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateVersionValidateBeforeCall(characterVersionCreateOrUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOCharacterDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param characterId 待删除的 characterId (required)
     * @param version 待删除的版本 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(String characterId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = String.format("/%s/api/character/delete", getApiVersion());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (characterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("characterId", characterId));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String characterId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling delete(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling delete(Async)");
        }

        return deleteCall(characterId, version, _callback);

    }

    /**
     * 删除角色
     * （逻辑）删除 character。返回成功或失败。
     * @param characterId 待删除的 characterId (required)
     * @param version 待删除的版本 (required)
     * @return ResultDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOBoolean delete(String characterId, Integer version) throws ApiException {
        ApiResponse<ResultDTOBoolean> localVarResp = deleteWithHttpInfo(characterId, version);
        return localVarResp.getData();
    }

    /**
     * 删除角色
     * （逻辑）删除 character。返回成功或失败。
     * @param characterId 待删除的 characterId (required)
     * @param version 待删除的版本 (required)
     * @return ApiResponse&lt;ResultDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOBoolean> deleteWithHttpInfo(String characterId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(characterId, version, null);
        Type localVarReturnType = new TypeToken<ResultDTOBoolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除角色 (asynchronously)
     * （逻辑）删除 character。返回成功或失败。
     * @param characterId 待删除的 characterId (required)
     * @param version 待删除的版本 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(String characterId, Integer version, final ApiCallback<ResultDTOBoolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(characterId, version, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOBoolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCharacterVersions
     * @param characterId 角色 characterId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCharacterVersionsCall(String characterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = String.format("/%s/api/character/versions/{characterId}", getApiVersion())
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put(AcaConstants.GATEWAY_HEADER_SERVICE_ROUTER, AcaOpenApiEnum.CHARACTER_VERSIONS.getGatewayRoute());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCharacterVersionsValidateBeforeCall(String characterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling listCharacterVersions(Async)");
        }

        return listCharacterVersionsCall(characterId, _callback);

    }

    /**
     * 角色版本列表
     * 获取角色版本列表
     * @param characterId 角色 characterId (required)
     * @return ResultDTOListCharacterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOListCharacterDTO listCharacterVersions(String characterId) throws ApiException {
        ApiResponse<ResultDTOListCharacterDTO> localVarResp = listCharacterVersionsWithHttpInfo(characterId);
        return localVarResp.getData();
    }

    /**
     * 角色版本列表
     * 获取角色版本列表
     * @param characterId 角色 characterId (required)
     * @return ApiResponse&lt;ResultDTOListCharacterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOListCharacterDTO> listCharacterVersionsWithHttpInfo(String characterId) throws ApiException {
        okhttp3.Call localVarCall = listCharacterVersionsValidateBeforeCall(characterId, null);
        Type localVarReturnType = new TypeToken<ResultDTOListCharacterDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 角色版本列表 (asynchronously)
     * 获取角色版本列表
     * @param characterId 角色 characterId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCharacterVersionsAsync(String characterId, final ApiCallback<ResultDTOListCharacterDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCharacterVersionsValidateBeforeCall(characterId, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOListCharacterDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendCharacterVersion
     * @param characterId 角色 characterId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendCharacterVersionCall(String characterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = String.format("/%s/api/character/newversion/recommend/{characterId}", getApiVersion())
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        localVarHeaderParams.put(AcaConstants.GATEWAY_HEADER_SERVICE_ROUTER, AcaOpenApiEnum.CHARACTER_VERSION_RECOMMEND.getGatewayRoute());
        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendCharacterVersionValidateBeforeCall(String characterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling recommendCharacterVersion(Async)");
        }

        return recommendCharacterVersionCall(characterId, _callback);

    }

    /**
     * 角色版本列表
     * 获取角色版本列表
     * @param characterId 角色 characterId (required)
     * @return ResultDTOCharacterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOCharacterDTO recommendCharacterVersion(String characterId) throws ApiException {
        ApiResponse<ResultDTOCharacterDTO> localVarResp = recommendCharacterVersionWithHttpInfo(characterId);
        return localVarResp.getData();
    }

    /**
     * 角色版本列表
     * 获取角色版本列表
     * @param characterId 角色 characterId (required)
     * @return ApiResponse&lt;ResultDTOCharacterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOCharacterDTO> recommendCharacterVersionWithHttpInfo(String characterId) throws ApiException {
        okhttp3.Call localVarCall = recommendCharacterVersionValidateBeforeCall(characterId, null);
        Type localVarReturnType = new TypeToken<ResultDTOCharacterDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 角色版本列表 (asynchronously)
     * 获取角色版本列表
     * @param characterId 角色 characterId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendCharacterVersionAsync(String characterId, final ApiCallback<ResultDTOCharacterDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendCharacterVersionValidateBeforeCall(characterId, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOCharacterDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param characterQueryDTO 查询条件 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(CharacterQueryDTO characterQueryDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = characterQueryDTO;

        // create path and map variables
        String localVarPath = String.format("/%s/api/character/search", getApiVersion());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(CharacterQueryDTO characterQueryDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterQueryDTO' is set
        if (characterQueryDTO == null) {
            throw new ApiException("Missing the required parameter 'characterQueryDTO' when calling search(Async)");
        }

        return searchCall(characterQueryDTO, _callback);

    }

    /**
     * 查询角色
     * 查询角色： - 可以指定的查询字段，and 关系：    - 角色名称：左匹配    - 查询范围      - my - 只查询我创建的角色      - public - 查询平台开放的角色      - pre_configured - 预制角色 - 可以指定一定的排序规则，如更新时间倒排。 - 搜索结果为 角色详情。 - 支持分页。 
     * @param characterQueryDTO 查询条件 (required)
     * @return ResultDTOPageResultCharacterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOPageResultCharacterDTO search(CharacterQueryDTO characterQueryDTO) throws ApiException {
        ApiResponse<ResultDTOPageResultCharacterDTO> localVarResp = searchWithHttpInfo(characterQueryDTO);
        return localVarResp.getData();
    }

    /**
     * 查询角色
     * 查询角色： - 可以指定的查询字段，and 关系：    - 角色名称：左匹配    - 查询范围      - my - 只查询我创建的角色      - public - 查询平台开放的角色      - pre_configured - 预制角色 - 可以指定一定的排序规则，如更新时间倒排。 - 搜索结果为 角色详情。 - 支持分页。 
     * @param characterQueryDTO 查询条件 (required)
     * @return ApiResponse&lt;ResultDTOPageResultCharacterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOPageResultCharacterDTO> searchWithHttpInfo(CharacterQueryDTO characterQueryDTO) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(characterQueryDTO, null);
        Type localVarReturnType = new TypeToken<ResultDTOPageResultCharacterDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询角色 (asynchronously)
     * 查询角色： - 可以指定的查询字段，and 关系：    - 角色名称：左匹配    - 查询范围      - my - 只查询我创建的角色      - public - 查询平台开放的角色      - pre_configured - 预制角色 - 可以指定一定的排序规则，如更新时间倒排。 - 搜索结果为 角色详情。 - 支持分页。 
     * @param characterQueryDTO 查询条件 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(CharacterQueryDTO characterQueryDTO, final ApiCallback<ResultDTOPageResultCharacterDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(characterQueryDTO, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOPageResultCharacterDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param characterUpdateDTO 待更新的角色信息 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(CharacterUpdateDTO characterUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = characterUpdateDTO;

        // create path and map variables
        String localVarPath = String.format("/%s/api/character/update", getApiVersion());

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(CharacterUpdateDTO characterUpdateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterUpdateDTO' is set
        if (characterUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'characterUpdateDTO' when calling update(Async)");
        }

        return updateCall(characterUpdateDTO, _callback);

    }

    /**
     * 更新角色信息
     * 必须字段：characterId。返回成功或失败。
     * @param characterUpdateDTO 待更新的角色信息 (required)
     * @return ResultDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTOBoolean update(CharacterUpdateDTO characterUpdateDTO) throws ApiException {
        ApiResponse<ResultDTOBoolean> localVarResp = updateWithHttpInfo(characterUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * 更新角色信息
     * 必须字段：characterId。返回成功或失败。
     * @param characterUpdateDTO 待更新的角色信息 (required)
     * @return ApiResponse&lt;ResultDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTOBoolean> updateWithHttpInfo(CharacterUpdateDTO characterUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(characterUpdateDTO, null);
        Type localVarReturnType = new TypeToken<ResultDTOBoolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新角色信息 (asynchronously)
     * 必须字段：characterId。返回成功或失败。
     * @param characterUpdateDTO 待更新的角色信息 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(CharacterUpdateDTO characterUpdateDTO, final ApiCallback<ResultDTOBoolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(characterUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<ResultDTOBoolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
